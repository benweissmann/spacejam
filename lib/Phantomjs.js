// Generated by CoffeeScript 1.8.0
(function() {
  var ChildProcess, DEFAULT_PATH, EventEmitter, Phantomjs, SELENIUM_HOSTNAME, SELENIUM_PATH, SELENIUM_PORT, SELENIUM_REMOTE_URL, expect, path, url, webdriverio, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  expect = require('chai').expect;

  ChildProcess = require('./ChildProcess');

  EventEmitter = require('events').EventEmitter;

  path = require('path');

  webdriverio = require('webdriverio');

  url = require('url');

  DEFAULT_PATH = process.env.PATH;

  SELENIUM_REMOTE_URL = url.parse(process.env.SELENIUM_REMOTE_URL);

  SELENIUM_HOSTNAME = SELENIUM_REMOTE_URL.hostname;

  SELENIUM_PORT = SELENIUM_REMOTE_URL.port;

  SELENIUM_PATH = SELENIUM_REMOTE_URL.path;

  Phantomjs = (function(_super) {
    __extends(Phantomjs, _super);

    function Phantomjs() {
      this.kill = __bind(this.kill, this);
      this.run = __bind(this.run, this);
      return Phantomjs.__super__.constructor.apply(this, arguments);
    }

    Phantomjs.prototype.browser = null;

    Phantomjs.prototype.intervals = null;

    Phantomjs.prototype.run = function(url, options, script, pipeClass, pipeClassOptions, useSystemPhantomjs) {
      var completionInterval, logInterval;
      if (options == null) {
        options = '--load-images=no --ssl-protocol=TLSv1';
      }
      if (script == null) {
        script = "phantomjs-test-in-console.js";
      }
      if (pipeClass == null) {
        pipeClass = void 0;
      }
      if (pipeClassOptions == null) {
        pipeClassOptions = void 0;
      }
      if (useSystemPhantomjs == null) {
        useSystemPhantomjs = false;
      }
      log.debug("Phantomjs.run()", arguments);
      expect(this.browser, "Browser is already connected").to.be["null"];
      expect(this.intervals, "Polling interval is already running").to.be["null"];
      this.intervals = [];
      this.browser = webdriverio.remote({
        host: SELENIUM_HOSTNAME,
        port: SELENIUM_PORT,
        path: SELENIUM_PATH,
        desiredCapabilities: {
          browserName: "chrome"
        }
      });
      this.browser.init().url(url);
      logInterval = setInterval((function(_this) {
        return function() {
          return _this.browser.log("browser").then(function(result) {
            return result.value.forEach(function(entry) {
              var message;
              if (entry.message) {
                if ((entry.message[0] === '{') && entry.message.match(/"url":"http:\/\/localhost:\d+\/packages\/practicalmeteor_mocha-console-runner\.js/)) {
                  return;
                }
                message = entry.message.replace(/https?:\/\/localhost(:\d+)?\/packages\/([a-zA-Z0-9\-_]+)\.js(\?hash=\w+)?/, '[$2]');
                return console.log(message);
              }
            });
          });
        };
      })(this), 500);
      this.intervals.push(logInterval);
      completionInterval = setInterval((function(_this) {
        return function() {
          return _this.browser.execute(function() {
            var failures, result;
            result = {
              done: false,
              TEST_STATUS: window.TEST_STATUS,
              DONE: window.DONE,
              FAILURES: window.FAILURES
            };
            if ((typeof TEST_STATUS !== "undefined") && (TEST_STATUS !== null)) {
              result.done = TEST_STATUS.DONE;
            }
            if ((typeof DONE !== "undefined") && (DONE !== null)) {
              result.done = DONE;
            }
            if (result.done) {
              failures = false;
              if ((typeof TEST_STATUS !== "undefined") && (TEST_STATUS !== null)) {
                failures = TEST_STATUS.FAILURES;
              }
              if ((typeof FAILURES !== "undefined") && (FAILURES !== null)) {
                failures = FAILURES;
              }
              result.code = failures ? 2 : 0;
            }
            return result;
          }).then(function(response) {
            var result;
            result = response.value;
            if (result.done) {
              console.log("Got completion result", result);
              _this.kill();
              return _this.emit("exit", result.code, '');
            } else {
              return console.log("No completion result yet", result);
            }
          });
        };
      })(this), 500);
      return this.intervals.push(completionInterval);
    };

    Phantomjs.prototype.kill = function(signal) {
      if (signal == null) {
        signal = "SIGTERM";
      }
      log.debug("Phantomjs.kill()");
      return this.intervals.forEach((function(_this) {
        return function(interval) {
          return clearInterval(interval);
        };
      })(this));
    };

    return Phantomjs;

  })(EventEmitter);

  module.exports = Phantomjs;

}).call(this);
